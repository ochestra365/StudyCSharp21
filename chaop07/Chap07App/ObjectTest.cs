using System;

namespace Chap07App
{
    class ObjectTest
    {
        static void Main(string[] args)
        {
            Console.WriteLine("객체사용");

            //cat cat1 = new cat();//생성은 ()을 넣어준다. 기본적인 키워드는 그냥 써줘도 되지만 참조형식은 무조건 New를 써줘야 한다. New는 객체의 인스턴스를 생성한다는 것이다.
            cat cat1 = new cat("야옹이","흰색" );
            cat1.Meow();//참조형식은 스택이랑 힙을 가지고 값을 드러내는 것이다. 참조형식을 쓰려면 초기화하는 키워드를 넣어줘야 한다. New(인스턴스 생성)를 넣어줘야 한다.

            cat cat2 = new cat();//cat이라는 속성을 가진 객체 cat2는 새로운 cat이라는 객체이다.
            cat2.Name = "미뇽";
            cat2.Color = "커피";
            cat2.Meow();

            cat cat3 = new cat();//cat이라는 속성을 가진 객체 cat3는 새로운 cat이라는 객체이다.
            cat3.Name = "달리";//cat3 주소를 타고 들어가서 cat에 있는 Name이라는 속성을 이용하겠다.
            cat3.Color = "크림";//cat3 주소를 타고 들어가서 cat에 있는 Color라는 속성을 이용하겠다.
            cat3.Meow();//meow를 사용하기 위해서이다.

           
            //츄가 세 번이나 울어재낌. 즉, 컴파일 에러가 일어난 것이 아니라 사용자 에러가 발생한 것이다.
        }
    }

    class cat//어떠한 기능을 하는 소스코드의 모듈화이다. 캣은 객체이다. 즉, 클래스는 객체를 의미한다.
    {
        public string Name;//이름(속성, 특성, 변수)//파라미터
        public string Color;//색상(속성, 특성, 변수)//파라미터
        public string gender;//성별(속성, 특성, 변수)//파라미터
        /*
         해당 명칭의 속성을 붙여준다. 나는 해당 명칭에 "문자열"이라는 속성을 붙여줬다. 그리고 아래에서 사용자 지정 생성자를 생성 시에 해당 명칭의 속성을 이용하는 것이다.
         */
        //아래는 메서드이다.
        public cat() { }//사용자 지정 생성자를 만들면 기본 생성자도 사용자가 만들어 줘야 한다. 생성자도 특정한 메서드이다. 
        
        public cat(string _name, string _color)//사용자 지정 생성자 만들어 버림. cat이라는 객체의 매개변수로 쓰이므로 멤버변수이자 멤버필드이다.
        {
            Name = _name;//생성자를 파라미터에 할당하기 위해서 사용하는 것이다.
            Color = _color;
        }
       
        public cat(string _name, string _color, string _gender)//이것은 성별까지 나타내는 생성자이다.
        {
            Name = _name;//파라미터에 멤버범수 적용
            Color = _color;//파라미터에 멤버범수 적용
            gender = _gender;//파라미터에 멤버범수 적용
        }

        public void Meow()//기능, 행위, 메서드(void는 리턴값이 없다는 의미이다. 즉, 클래스의 마무리를 선언하는 것이다.)-->이것은 클래스가 드러내고자 하는 최종적인 기능을 의미한다.
        {
            Console.WriteLine($"{Name}: 야옹");//실행 호출 시 쓰이는 것이기 때문에 사라진다. 
        }
    }
}
//생성자는 전부 왼쪽에 기입한다. this는 객체(클래스)를 의미하는 것이다.
//생성자를 선언한다. 생성자를 선언하고 나서 메서드에 멤버변수에 할당한다. 
//그리고 메서드에서 멤버변수의 속성을 이용하여 매개변수로 활용한다. 그것을 메서드 전역으로 펼치고, 메서드에서 클래스 전역으로 펼친다. 
//그리고 그것을 메인 클래스에서 참조 활용한다. 즉, 참조의 참조.
//멤버변수와 파라미터의 의미가 다른것을 컴파일러에게 인식시켜 주기 위해서 사용하는 것이다. params를 못 쓰는 것은 매개변수 안의 속성이 다르기 때문이다.
//this는 메서드 간 상대참조의 의미를 가지고 있다. 하나를 바꾸면 다 바꿀 수 있다. 파라미터 디폴트값을 설정을 안해줘도 된다.
//명확하게 속성이 다른 파라미터에서는 배열로 처리할 수 없다.(params)
//멤버변수와 파라미터의 변수명을 동일하는 이유는 클래스 메서드에 적용된 클래스의 멤버변수 속성을 그대로 메인 메서드에 가져다 쓸 수 있기 때문이다.
//this는 클래스 안에서 상대참조 역할(하나를 바꾸면 나머지도 같이 바뀜.)을 할 수도 있고, 멤버변수의 속성이 적용된 타 클래스의 메서드를 쓸 수 있다.